//
//  ViewController.m
//  earthnews
//
//  Created by Ubaka  Onyechi on 01/01/2012.
//  Copyright (c) 2012 SonOfLagos. All rights reserved.
//

#import "ViewController.h"

#import "../app/app.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#define DEBUG_LOG_TOUCHES 0

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

@interface ViewController ()
{
  EAGLContext *m_context;
}
@property (strong, nonatomic) EAGLContext *context;

@end

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

@implementation ViewController

@synthesize context = m_context;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) dealloc
{
  [m_context release];
  [super dealloc];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) viewDidLoad
{
  [super viewDidLoad];
  
  self.context = [[[EAGLContext alloc] initWithAPI:kEAGLRenderingAPIOpenGLES2] autorelease];
  
  if (!self.context)
  {
    CX_OUTPUTLOG_CONSOLE (1, "Failed ot create ES context");
  }

  GLKView *view = (GLKView *) self.view;
  
  view.context = self.context;
  view.drawableColorFormat = GLKViewDrawableColorFormatRGBA8888;
  view.drawableDepthFormat = GLKViewDrawableDepthFormat16;
  view.drawableStencilFormat = GLKViewDrawableStencilFormatNone;
  view.drawableMultisample = GLKViewDrawableMultisample4X;
  
  /*
  NSString *vertShaderPathname, *fragShaderPathname;
  
  // Create and compile vertex shader.
  vertShaderPathname = [[NSBundle mainBundle] pathForResource:@"Shader" ofType:@"vsh"];

  // Create and compile fragment shader.
  fragShaderPathname = [[NSBundle mainBundle] pathForResource:@"Shader" ofType:@"fsh"];
  
  NSLog(@"vert :%@\n", vertShaderPathname);
  NSLog(@"frag :%@\n", fragShaderPathname);
  
  const char *cVert = [vertShaderPathname cStringUsingEncoding:NSASCIIStringEncoding];
  const char *cFrag = [fragShaderPathname cStringUsingEncoding:NSASCIIStringEncoding];
  
  FILE *fp = fopen (cVert, "rb");
  
  if (fp)
  {
    fclose (fp);
    
    fp = fopen (cFrag, "rb");
    
    if (fp)
    {
      fclose (fp);
    }
  }
  */
  
  UIPinchGestureRecognizer *pinchGesture = [[UIPinchGestureRecognizer alloc]
                                            initWithTarget:self action:@selector(handlePinchGesture:)];
  [self.view addGestureRecognizer:pinchGesture];
  [pinchGesture release];

  [EAGLContext setCurrentContext:self.context];
  
  app_initialise ((int) view.bounds.size.width, (int) view.bounds.size.height);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) viewDidUnload
{
  [super viewDidUnload];
  
  [EAGLContext setCurrentContext:self.context];
  
  // applicattion deinitialise
  app_deinitialise ();
  
  if ([EAGLContext currentContext] == self.context)
  {
    [EAGLContext setCurrentContext:nil];
  }
  
  self.context = nil;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) didReceiveMemoryWarning
{
  [super didReceiveMemoryWarning];
  // release any cached data, images, etc that aren't in use
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (BOOL) shouldAutorotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation
{
  if ([[UIDevice currentDevice] userInterfaceIdiom] == UIUserInterfaceIdiomPhone) 
  {
    return (toInterfaceOrientation != UIInterfaceOrientationPortraitUpsideDown);
  } 
  else 
  {
    return YES;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) update
{
  app_update ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) glkView:(GLKView *)view drawInRect:(CGRect)rect
{
  app_render ();
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) touchesBegan:(NSSet *)touches withEvent:(UIEvent *)event
{
  CX_OUTPUTLOG_CONSOLE (1, "touchesBegan [%d]", [[event allTouches] count]);
  
  UITouch *touch = [[[event allTouches] allObjects] objectAtIndex:0];
  CGPoint currTouchPoint = [touch locationInView:self.view];
  
  CX_OUTPUTLOG_CONSOLE (DEBUG_LOG_TOUCHES, "touch: x = %.1f, y = %.1f", currTouchPoint.x, currTouchPoint.y);

  float screen_width = self.view.frame.size.width;
  float screen_height = self.view.frame.size.height;
  
  float normalised_x = currTouchPoint.x / screen_width;
  float normalised_y = currTouchPoint.y / screen_height;
  
  app_input_touch_began (normalised_x, normalised_y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) touchesEnded:(NSSet *)touches withEvent:(UIEvent *)event
{
  CX_OUTPUTLOG_CONSOLE (1, "touchesEnded [%d]", [[event allTouches] count]);
  
  UITouch *touch = [[[event allTouches] allObjects] objectAtIndex:0];
  CGPoint currTouchPoint = [touch locationInView:self.view];
  
  CX_OUTPUTLOG_CONSOLE (DEBUG_LOG_TOUCHES, "touch: x = %.1f, y = %.1f", currTouchPoint.x, currTouchPoint.y);
  
  float screen_width = self.view.frame.size.width;
  float screen_height = self.view.frame.size.height;
  
  float normalised_x = currTouchPoint.x / screen_width;
  float normalised_y = currTouchPoint.y / screen_height;
  
  app_input_touch_ended (normalised_x, normalised_y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event
{
  CX_OUTPUTLOG_CONSOLE (1, "touchesMoved [%d]", [[event allTouches] count]);
  
  UITouch *touch = [[[event allTouches] allObjects] objectAtIndex:0];
  CGPoint currTouchPoint = [touch locationInView:self.view];
  CGPoint prevTouchPoint = [touch previousLocationInView:self.view];
  
  CX_OUTPUTLOG_CONSOLE (DEBUG_LOG_TOUCHES, "prev: x = %.1f, y = %.1f", prevTouchPoint.x, prevTouchPoint.y);
  CX_OUTPUTLOG_CONSOLE (DEBUG_LOG_TOUCHES, "curr: x = %.1f, y = %.1f", currTouchPoint.x, currTouchPoint.y);
  
  float screen_width = self.view.frame.size.width;
  float screen_height = self.view.frame.size.height;
  
  float normalised_x = currTouchPoint.x / screen_width;
  float normalised_y = currTouchPoint.y / screen_height;
  float normalised_prev_x = prevTouchPoint.x / screen_width;
  float normalised_prev_y = prevTouchPoint.y / screen_height;
  
  app_input_touch_moved (normalised_x, normalised_y, normalised_prev_x, normalised_prev_y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void) touchesCancelled:(NSSet *)touches withEvent:(UIEvent *)event
{
  CX_OUTPUTLOG_CONSOLE (1, "touchesCancelled [%d]", [[event allTouches] count]);
  
  UITouch *touch = [[[event allTouches] allObjects] objectAtIndex:0];
  CGPoint currTouchPoint = [touch locationInView:self.view];
  
  CX_OUTPUTLOG_CONSOLE (DEBUG_LOG_TOUCHES, "touch: x = %.1f, y = %.1f", currTouchPoint.x, currTouchPoint.y);
  
  float screen_width = self.view.frame.size.width;
  float screen_height = self.view.frame.size.height;
  
  float normalised_x = currTouchPoint.x / screen_width;
  float normalised_y = currTouchPoint.y / screen_height;
  
  app_input_touch_ended (normalised_x, normalised_y);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

- (void)handlePinchGesture:(UIGestureRecognizer *)sender 
{
  CGFloat factor = [(UIPinchGestureRecognizer *)sender scale];
  
  CX_OUTPUTLOG_CONSOLE (1, "Pinch Gesture: factor [%.2f]", factor);
  
  factor = cx_clamp (factor, 0.5f, 1.5f);
  //self.view.transform = CGAffineTransformMakeScale (factor, factor);
  
  app_input_zoom (factor);
}

@end
