//
//  cx_thread.h
//
//  Created by Ubaka Onyechi on 17/06/2012.
//  Copyright (c) 2012 uonyechi.com. All rights reserved.
//

#ifndef CX_THREAD_H
#define CX_THREAD_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "cx_system.h"
#include <pthread.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef void (*cx_thread_func)(void *userdata);

struct cx_thread
{
  pthread_t thread;
  cx_thread_func func;
  void *userdata;
  
  bool finished;
  bool executing;
  bool cancelled;
};

struct cx_thread_event
{
  pthread_cond_t event;
  pthread_mutex_t mutex;
};

typedef pthread_mutex_t cx_thread_mutex;
typedef struct cx_thread_event cx_thread_event;
typedef struct cx_thread cx_thread;
typedef enum 
{
  CX_THREAD_TYPE_INVALID,
  CX_THREAD_TYPE_JOINABLE = PTHREAD_CREATE_JOINABLE,
  CX_THREAD_TYPE_DETACHED = PTHREAD_CREATE_DETACHED,
} cx_thread_type;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

cx_thread *cx_thread_create (const char *name, cx_thread_type type, cx_thread_func func, void *userdata);
void cx_thread_destroy (cx_thread *thread);

void cx_thread_cancel (cx_thread *thread);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void cx_thread_mutex_init (cx_thread_mutex *mutex);
void cx_thread_mutex_deinit (cx_thread_mutex *mutex);

void cx_thread_mutex_lock (cx_thread_mutex *mutex);
void cx_thread_mutex_unlock (cx_thread_mutex *mutex);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void cx_thread_event_init (cx_thread_event *event);
void cx_thread_event_deinit (cx_thread_event *event);

bool cx_thread_event_wait (cx_thread_event *event, cxi32 timeout);
void cx_thread_event_signal (cx_thread_event *event);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
