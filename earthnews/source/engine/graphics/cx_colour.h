//
//  cx_colour.h
//
//  Copyright (c) 2012 Ubaka Onyechi. All rights reserved.
//

#ifndef CX_COLOUR_H
#define CX_COLOUR_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../system/cx_vector4.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef cx_vec4 cx_colour;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_colour_set (cx_colour *colour, cxf32 r, cxf32 g, cxf32 b, cxf32 a);
static CX_INLINE const cx_colour *cx_colour_black (void);
static CX_INLINE const cx_colour *cx_colour_white (void);
static CX_INLINE const cx_colour *cx_colour_red (void);
static CX_INLINE const cx_colour *cx_colour_orange (void);
static CX_INLINE const cx_colour *cx_colour_yellow (void);
static CX_INLINE const cx_colour *cx_colour_green (void);
static CX_INLINE const cx_colour *cx_colour_blue (void);
static CX_INLINE const cx_colour *cx_colour_indigo (void);
static CX_INLINE const cx_colour *cx_colour_violet (void);
static CX_INLINE const cx_colour *cx_colour_cyan (void);
static CX_INLINE const cx_colour *cx_colour_grey (void);
static CX_INLINE const cx_colour *cx_colour_null (void);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_colour_set (cx_colour *colour, cxf32 r, cxf32 g, cxf32 b, cxf32 a)
{
  CX_ASSERT (colour);
  cx_vec4_set (colour, r, g, b, a);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_black (void)
{
  static cx_colour black = {{ 0.0f, 0.0f, 0.0f, 1.0f }};
  return &black;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_white (void)
{
  static cx_colour white = {{ 1.0f, 1.0f, 1.0f, 1.0f }};
  return &white;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_red (void)
{
  static cx_colour red = {{ 1.0f, 0.0f, 0.0f, 1.0f }};
  return &red;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_green (void)
{
  static cx_colour green = {{ 0.0f, 1.0f, 0.0f, 1.0f }};
  return &green;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_blue (void)
{
  static cx_colour blue = {{ 0.0f, 0.0f, 1.0f, 1.0f }};
  return &blue;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_orange (void)
{
  static cx_colour orange = {{ 1.0f, 0.5f, 0.0f, 1.0f }};
  return &orange;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_yellow (void)
{
  static cx_colour yellow = {{ 1.0f, 1.0f, 0.0f, 1.0f }};
  return &yellow;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_violet (void)
{
  static cx_colour violet = {{ 0.5f, 0.0f, 1.0f, 1.0f }};
  return &violet;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_indigo (void)
{
  static cx_colour indigo = {{ 0.29f, 0.0f, 0.51f, 1.0f }};
  return &indigo;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_cyan (void)
{
  static cx_colour cyan = {{ 0.0f, 1.0f, 1.0f, 1.0f }};
  return &cyan;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_grey (void)
{
  static cx_colour grey = {{ 0.5f, 0.5f, 0.5f, 1.0f }};
  return &grey;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE const cx_colour *cx_colour_null (void)
{
  static cx_colour null = {{ 0.0f, 0.0f, 0.0f, 0.0f }};
  return &null;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
