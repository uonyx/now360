//
//  cx_http.h
//
//  Copyright (c) 2012 Ubaka Onyechi. All rights reserved.
//

#ifndef CX_HTTP_H
#define CX_HTTP_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../system/cx_system.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#define CX_HTTP_REQUEST_ID_INVALID (-1)

typedef cxi32 cx_http_request_id;

typedef enum cx_http_conn
{
  CX_HTTP_CONNECTION_OK,
  CX_HTTP_CONNECTION_ERROR,
} cx_http_conn;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct cx_http_request_field
{
  const char *name;
  const char *value;
} cx_http_request_field;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef struct cx_http_response
{
  cx_http_conn error;
  cxi32 statusCode;
  const cxu8 *data;
  cxi32 dataSize;
} cx_http_response;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef void (*cx_http_response_callback) (cx_http_request_id tId, const cx_http_response *response, void *userdata);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

cx_http_request_id cx_http_get (const char *url, cx_http_request_field *headers, cxi32 headerCount, cxi32 timeout, 
                                cx_http_response_callback callback, void *userdata);

cx_http_request_id cx_http_post (const char *url, const void *postdata, cxi32 postdataSize, 
                                 cx_http_request_field *headers, cxi32 headerCount, cxi32 timeout, 
                                 cx_http_response_callback callback, void *userdata);

void               cx_http_cancel (cx_http_request_id *requestId);

void               cx_http_clear_cache (void);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool _cx_http_init (cxu32 cacheMemSizeMb, cxu32 cacheDiskSizeMb, bool clearCache);
bool _cx_http_deinit (void);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
