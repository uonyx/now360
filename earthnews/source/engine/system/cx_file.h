//
//  cx_file.h
//
//  Created by Ubaka Onyechi on 02/01/2012.
//  Copyright (c) 2012 uonyechi.com. All rights reserved.
//

#ifndef CX_FILE_H
#define CX_FILE_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "cx_system.h"
#include "../3rdparty/json-parser/json.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#define CX_FILENAME_MAX 256

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#define	CX_FILE_SEEK_OFFSET_SET SEEK_SET
#define	CX_FILE_SEEK_OFFSET_CUR SEEK_CUR
#define	CX_FILE_SEEK_OFFSET_END SEEK_END

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum
{
  CX_FILE_MODE_READ   = 1,
  CX_FILE_MODE_WRITE  = 1 << 1,
  CX_FILE_MODE_APPEND = 1 << 2
} cx_file_mode;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

struct cx_file
{
  FILE *fp;
  void *data;
  cxu32 size;
};

typedef struct cx_file cx_file;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool cx_file_load (cx_file *file, const char *filename);
bool cx_file_unload (cx_file *file);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool cx_file_open (cx_file *file, const char *filename, cxu32 mode);
bool cx_file_close (cx_file *file);
cxu32 cx_file_read (cx_file *file, void *buffer, cxu32 size, cxu32 count);
cxu32 cx_file_write (cx_file *file, void *buffer, cxu32 size, cxu32 count);
cxi32 cx_file_flush (cx_file *file);
cxi32 cx_file_seek (cx_file *file, cxi32 offset, cxi32 origin);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

cxu32 cx_file_get_size (const char *filename);
bool cx_file_get_exists (const char *filename);
void cx_file_get_absolute_path (const char *filename, char *destFilepath, int destFilePathSize);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
