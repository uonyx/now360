//
//  cx_debug.h
//
//  Copyright (c) 2012 Ubaka Onyechi. All rights reserved.
//

#ifndef CX_DEBUG_H
#define CX_DEBUG_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "cx_defines.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

// defines
#define CX_DEBUG                    (DEBUG)
#define CX_RELEASE                  (!DEBUG)
#define CX_DEBUG_LOG_ENABLE         (CX_DEBUG && 1)

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

// asserts
#if CX_DEBUG
#define CX_ASSERT(X)                do { if (!(X)) { _cx_assert (__FILE__, __LINE__, #X); } } while (0)
#define CX_FATAL_ASSERT(X)          CX_ASSERT(X)
#define CX_ERROR(X)                 _cx_error (__FILE__, __LINE__, #X) 
#define CX_FATAL_ERROR(X)           _cx_error (__FILE__, __LINE__, #X) 
#define CX_DEBUG_BREAK              _cx_debug_break ()
#define CX_DEBUG_BREAKABLE_EXPR     int brk = 0; brk += 0;
#else
#define CX_ASSERT(X)                do { (void)sizeof(X); } while (0)
//#define CX_ASSERT(X)                do { (void)(true ? 0 : ((X), void(), 0)); } while (0)
#define CX_FATAL_ASSERT(X)
#define CX_ERROR(X) 
#define CX_DEBUG_BREAK
#define CX_DEBUG_BREAKABLE_EXPR
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

// logs

#if CX_DEBUG_LOG_ENABLE
#define CX_LOG_CONSOLE(C, ...)  do { if (C) { _cx_console_log(__FILE__, __LINE__, __VA_ARGS__); } } while (0)
#else
#define CX_LOG_CONSOLE(C, ...)
#endif

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

// miscellany
#define CX_REF_UNUSED(X) (void)(X)

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#if CX_DEBUG

void _cx_console_log (const char *file, int line, const char *format, ...);
void _cx_debug_break (void);

void _cx_assert (const char *filename, int lineNumber, const char *assertString);
void _cx_error (const char *filename, int lineNumber, const char *fatalString);

#endif
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
