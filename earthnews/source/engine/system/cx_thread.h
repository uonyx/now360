//
//  cx_thread.h
//
//  Created by Ubaka Onyechi on 17/06/2012.
//  Copyright (c) 2012 uonyechi.com. All rights reserved.
//

#ifndef CX_THREAD_H
#define CX_THREAD_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "cx_system.h"
#include <pthread.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum 
{
  CX_THREAD_TYPE_INVALID,
  CX_THREAD_TYPE_JOINABLE = PTHREAD_CREATE_JOINABLE,
  CX_THREAD_TYPE_DETACHED = PTHREAD_CREATE_DETACHED,
} cx_thread_type;

typedef enum {
  CX_THREAD_EXIT_STATUS_SUCCESS,
  CX_THREAD_EXIT_STATUS_FAILURE,
  CX_THREAD_EXIT_STATUS_CANCELLED
} cx_thread_exit_status;

typedef cx_thread_exit_status (*cx_thread_func)(void *userdata);

typedef struct cx_thread_monitor
{
  pthread_cond_t cond;
  pthread_mutex_t mutex;
  cxi32 sigcount; // protects against logical error of calling signal before wait & useful for debug
} cx_thread_monitor;

typedef pthread_mutex_t cx_thread_mutex;

typedef struct cx_thread
{
  const char *name;
  pthread_t id;
  cx_thread_type type;
  cx_thread_func func;
  void *funcUserData;
  cx_thread_monitor start;
  bool cancel;
} cx_thread;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

cx_thread *cx_thread_create (const char *name, cx_thread_type type, cx_thread_func func, void *userdata);
void cx_thread_destroy (cx_thread *thread);

void cx_thread_start (cx_thread *thread);
void cx_thread_cancel (cx_thread *thread);

void cx_thread_join (cx_thread *thread, cx_thread_exit_status *exitStatus);
void cx_thread_detach (cx_thread *thread);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool cx_thread_mutex_init (cx_thread_mutex *mutex);
bool cx_thread_mutex_deinit (cx_thread_mutex *mutex);

void cx_thread_mutex_lock (cx_thread_mutex *mutex);
void cx_thread_mutex_unlock (cx_thread_mutex *mutex);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool cx_thread_monitor_init (cx_thread_monitor *monitor);
bool cx_thread_monitor_deinit (cx_thread_monitor *monitor);

void cx_thread_monitor_signal (cx_thread_monitor *monitor);
void cx_thread_monitor_wait (cx_thread_monitor *monitor);
bool cx_thread_monitor_wait_timed (cx_thread_monitor *monitor, cxu32 timeout);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
