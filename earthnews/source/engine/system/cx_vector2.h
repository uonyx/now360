//
//  cx_vector2.h
//
//  Created by Ubaka Onyechi on 30/09/2012.
//  Copyright (c) 2012 uonyechi.com. All rights reserved.
//

#ifndef CX_VECTOR2_H
#define CX_VECTOR2_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "cx_system.h"
#include "cx_math.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

union cx_vec2
{
  struct { cxf32 x, y; };
  cxf32 f2 [2];
};

typedef union cx_vec2 cx_vec2;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_vec2_set (cx_vec2 * CX_RESTRICT v, cxf32 x, cxf32 y);
static CX_INLINE void cx_vec2_add (cx_vec2 * CX_RESTRICT v_out, const cx_vec2 * CX_RESTRICT v0, const cx_vec2 * CX_RESTRICT v1);
static CX_INLINE void cx_vec2_sub (cx_vec2 * CX_RESTRICT v_out, const cx_vec2 * CX_RESTRICT v0, const cx_vec2 * CX_RESTRICT v1);
static CX_INLINE void cx_vec2_normalise (cx_vec2 *v);
static CX_INLINE cxf32 cx_vec2_length (cx_vec2 *v);
static CX_INLINE void cx_vec2_mul (cx_vec2 * CX_RESTRICT v_out, cxf32 s, const cx_vec2 * CX_RESTRICT v);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_vec2_set (cx_vec2 * CX_RESTRICT v, cxf32 x, cxf32 y)
{
  CX_ASSERT (v);
  
  v->x = x;
  v->y = y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_vec2_add (cx_vec2 * CX_RESTRICT v_out, const cx_vec2 * CX_RESTRICT v0, const cx_vec2 * CX_RESTRICT v1)
{
  CX_ASSERT (v_out);
  CX_ASSERT (v0);
  CX_ASSERT (v1);
  CX_ASSERT (cx_validatef (v0->x));
  CX_ASSERT (cx_validatef (v0->y));
  CX_ASSERT (cx_validatef (v1->x));
  CX_ASSERT (cx_validatef (v1->y));
  
  v_out->x = v0->x + v1->x;
  v_out->y = v0->y + v1->y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_vec2_sub (cx_vec2 * CX_RESTRICT v_out, const cx_vec2 * CX_RESTRICT v0, const cx_vec2 * CX_RESTRICT v1)
{
  CX_ASSERT (v_out);
  CX_ASSERT (v0);
  CX_ASSERT (v1);
  CX_ASSERT (cx_validatef (v0->x));
  CX_ASSERT (cx_validatef (v0->y));
  CX_ASSERT (cx_validatef (v1->x));
  CX_ASSERT (cx_validatef (v1->y));
  
  v_out->x = v0->x - v1->x;
  v_out->y = v0->y - v1->y;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_vec2_mul (cx_vec2 * CX_RESTRICT v_out, cxf32 s, const cx_vec2 * CX_RESTRICT v)
{
  CX_ASSERT (v);
  CX_ASSERT (cx_validatef (v->x));
  CX_ASSERT (cx_validatef (v->y));
  CX_ASSERT (cx_validatef (s));
  
  v_out->x = v->x * s;
  v_out->y = v->y * s;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE void cx_vec2_normalise (cx_vec2 *v)
{
  CX_ASSERT (v);
  CX_ASSERT (cx_validatef (v->x));
  CX_ASSERT (cx_validatef (v->y));
  
  cxf32 len = cx_vec2_length (v);
  
  CX_ASSERT (cx_validatef (len));
  CX_ASSERT (len > CX_EPSILON);
  
  cx_vec2_mul (v, (1.0f / len), v);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE cxf32 cx_vec2_length (cx_vec2 *v)
{
  CX_ASSERT (v);
  CX_ASSERT (cx_validatef (v->x));
  CX_ASSERT (cx_validatef (v->y));
  
  cxf32 lsqr = (v->x * v->x) + (v->y * v->y);
  
  cxf32 l = cx_sqrt (lsqr);
  
  return l;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
