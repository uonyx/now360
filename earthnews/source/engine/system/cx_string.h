//
//  cx_string.h
//
//  Created by Ubaka Onyechi on 21/01/2012.
//  Copyright (c) 2012 uonyechi.com. All rights reserved.
//

#ifndef CX_STRING_H
#define CX_STRING_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "cx_system.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

cxu32 cx_str_explode (char **dst, cxu32 dstSize, const char *src, char delimiter);
cxu32 cx_str_percent_encode (char *dst, cxu32 dstSize, const char *src);
cxu32 cx_str_html_unescape (char *dst, cxu32 dstSize, const char *src);
cxu32 cx_str_utf8_to_unicode (cxu32 *dst, cxu32 dstSize, const char *utf8src);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE char *cx_strcat (char *dst, cxu32 dstSize, const char *src);
static CX_INLINE char *cx_strcpy (char *dst, cxu32 dstSize, const char *src);
static CX_INLINE char *cx_strdup (const char *str, cxu32 strLength);
static CX_INLINE cxi32 cx_sprintf (char *dst, cxu32 dstSize, const char *format, ...);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE char *cx_strcpy (char *dst, cxu32 dstSize, const char *src)
{
  CX_ASSERT (src);
  CX_ASSERT (dst);
  CX_ASSERT (dstSize);
  
#if 0
  CX_ASSERT (strlen (src) < dstSize);
  return strcpy (dst, src);
#else
  char *d = strncpy (dst, src, dstSize);
  dst [dstSize - 1] = 0;
  return d;
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE char *cx_strcat (char *dst, cxu32 dstSize, const char *src)
{
  CX_ASSERT (src);
  CX_ASSERT (dst);
  CX_ASSERT (dstSize);
  CX_ASSERT ((dstSize - strlen (dst)) > strlen (src));
  
#if 1
  char *d = dst;
  while (*d) { d++; }
  while ((*d++ = *src++)) {}
  return --d;
#else
  return strcat (dst, src);
#endif
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE char *cx_strdup (const char *str, cxu32 strLength)
{
  CX_ASSERT (str);
  CX_ASSERT (strLength);
  
  cxu32 dsize = strLength + 1;
  
  char *d = cx_malloc (dsize);
  
  CX_ASSERT (d);
  
  return cx_strcpy (d, dsize, str);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static CX_INLINE cxi32 cx_sprintf (char *dst, cxu32 dstSize, const char *format, ...)
{
  CX_ASSERT (dst);
  CX_ASSERT (dstSize);
  CX_ASSERT (format);
  
  cxi32 c;
  va_list args;
  
  va_start (args, format);
  c = vsnprintf (dst, dstSize, format, args);
  va_end (args);
  
  return c;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////


#endif
