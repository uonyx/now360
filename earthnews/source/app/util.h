//
//  util.h
//  now360
//
//  Copyright (c) 2012 Ubaka Onyechi. All rights reserved.
//

#ifndef UTIL_H
#define UTIL_H

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../engine/cx_engine.h"

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////


typedef enum
{
  FONT_ID_INVALID = -1,
  FONT_ID_DEFAULT_12,   // earth (city name, temperature)
  FONT_ID_DEFAULT_14,   // earth (city name, temperature)
  FONT_ID_DEFAULT_16,   // music track and clock
  FONT_ID_NEWS_18,      // news item
  FONT_ID_TWITTER_16,
  NUM_FONT_IDS
} font_id_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef void (*anim_finished_callback) (void *userdata);

typedef enum
{
  ANIM_TYPE_INVALID,
  ANIM_TYPE_LINEAR,
} anim_type_t;

typedef struct
{
  float t;
  float duration;
  float now;
  bool on;
  anim_type_t type;
  anim_finished_callback fn;
  void *fndata;
} anim_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum
{
  STATUS_BAR_MSG_NONE = -1,
  STATUS_BAR_MSG_CONNECTION_ERROR,
  STATUS_BAR_MSG_NEWS_COMMS_ERROR,
  STATUS_BAR_MSG_WEATHER_COMMS_ERROR,
  STATUS_BAR_MSG_TWITTER_COMMS_ERROR,
  STATUS_BAR_MSG_IOS_MEMORY_WARNING,
  NUM_STATUS_BAR_MSGS
} status_bar_msg_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum
{
  SCREEN_FADE_TYPE_IN,
  SCREEN_FADE_TYPE_OUT,
} screen_fade_type_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

typedef enum
{
  DEVICE_TYPE_INVALID,
  DEVICE_TYPE_IPAD1,
  DEVICE_TYPE_IPAD2,
  DEVICE_TYPE_IPAD3,
  DEVICE_TYPE_UNKNOWN,
} device_type_t;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool util_init (const void *rootvc);
void util_deinit (void);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void util_thread_init (void);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

int util_get_dst_offset_secs (const char *tzname);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

const cx_font *util_get_font (font_id_t fontId);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool util_anim_start (anim_t *anim, anim_type_t type, float duration, anim_finished_callback fn, void *fndata);
void util_anim_stop (anim_t *anim);
bool util_anim_update (anim_t *anim, float deltaTime);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void util_activity_indicator_set_active (bool active);
bool util_activity_indicator_get_active (void);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void util_status_bar_render (void);
void util_status_bar_set_msg (status_bar_msg_t msg);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void util_screen_fade_render (float deltaTime);
bool util_screen_fade_trigger (screen_fade_type_t type, float opacity, float secs, anim_finished_callback fn, void *fndata);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

device_type_t util_get_device_type (void);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void util_profanity_filter (char *text);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool util_add_skip_backup_attribute_to_path (const char *filepath, cx_file_storage_base storage);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

int util_get_translation (char *dest, int destSize, const char *tag);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

#endif
