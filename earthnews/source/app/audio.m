//
//  audio.c
//  earthnews
//
//  Created by Ubaka Onyechi on 12/01/2013.
//  Copyright (c) 2013 uonyechi.com. All rights reserved.
//

#import "audio.h"
#import <MediaPlayer/MediaPlayer.h>

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static void audio_music_init (void);
static void audio_music_deinit (void);
static void audio_music_update_queue (MPMediaItemCollection *collection);
static void audio_music_picker (bool show);

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

@interface MusicPickerDelegate : UIViewController<MPMediaPickerControllerDelegate>
{
}
@end

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

@interface MusicNotifcation : NSObject
{
}
- (void) handleNowPlayingItemChanged:(NSNotification *)notification;
- (void) handlePlaybackStateChanged:(NSNotification *)notification;
@end

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

@implementation MusicPickerDelegate

- (void) mediaPicker:(MPMediaPickerController *)mediaPicker didPickMediaItems:(MPMediaItemCollection *)mediaItemCollection
{
  audio_music_update_queue (mediaItemCollection);
  audio_music_picker (false);
}

- (void) mediaPickerDidCancel:(MPMediaPickerController *)mediaPicker
{
  audio_music_picker (false);
}

@end

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

@implementation MusicNotifcation

- (void) handleNowPlayingItemChanged:(NSNotification *)notification
{
}

- (void) handlePlaybackStateChanged:(NSNotification *)notification
{
}

@end

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static bool s_initialised = false;
static UIViewController *s_rootViewController = nil;
static MPMusicPlayerController *s_musicPlayer = nil;
static MPMediaPickerController *s_musicPicker = nil;
static MusicPickerDelegate *s_musicPickerDelegate = nil;
static MusicNotifcation *s_musicNotification = nil;
static MPMediaItemCollection *s_currentCollection = nil;

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool audio_init (void *rootvc)
{
  CX_ASSERT (!s_initialised);
  CX_ASSERT (rootvc);
  
  s_rootViewController = (UIViewController *) rootvc;
  
  audio_music_init ();
  
  s_initialised = true;
  
  return s_initialised;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void audio_deinit (void)
{
  CX_ASSERT (s_initialised);
  
  audio_music_deinit ();
  
  s_initialised = false;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void audio_music_pick ()
{
  audio_music_picker (true);
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void audio_music_play (void)
{
  CX_ASSERT (s_musicPlayer);
  
  [s_musicPlayer play];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void audio_music_pause (void)
{
  CX_ASSERT (s_musicPlayer);
  
  [s_musicPlayer pause];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void audio_music_next (void)
{
  CX_ASSERT (s_musicPlayer);
  
  [s_musicPlayer skipToNextItem];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void audio_music_prev (void)
{
  CX_ASSERT (s_musicPlayer);
  
  [s_musicPlayer skipToPreviousItem];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

bool audio_music_is_playing (void)
{
  CX_ASSERT (s_musicPlayer);
  
  bool ret = false;
  
  MPMediaItem *nowPlayingItem = [s_musicPlayer nowPlayingItem];
  
  MPMusicPlaybackState playbackState = [s_musicPlayer playbackState];

  if (nowPlayingItem && (playbackState == MPMusicPlaybackStatePlaying))
  {
    ret = true;
  }
  
  return ret;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

int audio_music_get_track_id (char *buffer, int bufferlen)
{
  CX_ASSERT (s_musicPlayer);
  CX_ASSERT (buffer);
  CX_ASSERT (bufferlen > 0);
  
  int size = 0;
  
  MPMediaItem *nowPlayingItem = [s_musicPlayer nowPlayingItem];
  
  if (nowPlayingItem)
  {
    NSString *artist = [nowPlayingItem valueForProperty:MPMediaItemPropertyArtist];
    NSString *title = [nowPlayingItem valueForProperty:MPMediaItemPropertyTitle];
    
    const char *a = [artist cStringUsingEncoding:NSASCIIStringEncoding];
    const char *t = [title cStringUsingEncoding:NSASCIIStringEncoding];
    
    size = cx_sprintf (buffer, bufferlen, "%s - %s", a, t);
  }
  
  return size;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static void audio_music_init (void)
{
  s_musicPlayer = [MPMusicPlayerController applicationMusicPlayer];
  
  s_musicNotification = [[MusicNotifcation alloc] init];
  
  s_musicPickerDelegate = [[MusicPickerDelegate alloc] init];
  
  s_musicPicker = [[MPMediaPickerController alloc] initWithMediaTypes:MPMediaTypeAnyAudio];
  
  [s_musicPicker setDelegate:s_musicPickerDelegate];
  
  [s_musicPicker setAllowsPickingMultipleItems:YES];
  
  [s_musicPicker setPrompt:@"Queue songs for playback"];
  
  NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
  
  [notificationCenter addObserver:s_musicNotification 
                         selector:@selector (handleNowPlayingItemChanged:) 
                             name:MPMusicPlayerControllerNowPlayingItemDidChangeNotification 
                           object:s_musicPlayer];
  
  [notificationCenter addObserver:s_musicNotification 
                         selector:@selector (handlePlaybackStateChanged:) 
                             name:MPMusicPlayerControllerPlaybackStateDidChangeNotification 
                           object:s_musicPlayer];
  
  [s_musicPlayer beginGeneratingPlaybackNotifications];
  [s_musicPlayer setRepeatMode:MPMusicRepeatModeAll];
  [s_musicPlayer setShuffleMode:MPMusicShuffleModeOff];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static void audio_music_deinit (void)
{
  NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
  
  [notificationCenter removeObserver:s_musicNotification 
                             name:MPMusicPlayerControllerNowPlayingItemDidChangeNotification 
                           object:s_musicPlayer];
  
  [notificationCenter removeObserver:s_musicNotification 
                             name:MPMusicPlayerControllerPlaybackStateDidChangeNotification 
                           object:s_musicPlayer];
  
  [s_musicPlayer endGeneratingPlaybackNotifications];
  
  [s_musicPicker release];
  
  [s_musicPickerDelegate release];
  
  [s_musicNotification release];
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

static void audio_music_update_queue (MPMediaItemCollection *collection)
{
  if (!collection)
  {
    return;
  }
  
  if (s_currentCollection)
  {
    MPMusicPlaybackState playbackState = [s_musicPlayer playbackState];
    NSTimeInterval currentPlaybackTime = [s_musicPlayer currentPlaybackTime];
    MPMediaItem *nowPlayingItem = [s_musicPlayer nowPlayingItem];
    
    NSMutableArray *currentItems = [[s_currentCollection items] mutableCopy];
    NSArray *newItems = [collection items];
    
    [currentItems addObjectsFromArray:newItems];
    s_currentCollection = [MPMediaItemCollection collectionWithItems:(NSArray *) currentItems];
    [s_musicPlayer setQueueWithItemCollection:s_currentCollection];
    
    [s_musicPlayer setCurrentPlaybackTime:currentPlaybackTime];
    [s_musicPlayer setNowPlayingItem:nowPlayingItem];
    
    if (playbackState == MPMusicPlaybackStatePlaying)
    {
      [s_musicPlayer play];
    }
  }
  else
  {
    s_currentCollection = collection;
    
    [s_musicPlayer setQueueWithItemCollection:s_currentCollection];
    [s_musicPlayer play];
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////

void audio_music_picker (bool show)
{
  if (show)
  {
    [s_rootViewController presentModalViewController:s_musicPicker animated:YES];
  }
  else
  {
    [s_rootViewController dismissModalViewControllerAnimated:YES];
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////
